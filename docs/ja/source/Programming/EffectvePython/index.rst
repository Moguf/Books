Effective Python: 59 Specific Ways to Write Better Python
==========================================================


どうして読むか。
-----------------
PythonのTipsを学ぶためにこの本を読む。Effectiveシリーズは他にもあるが、実際にプログラミングをする際に役立つ情報が盛りだくさんで読む価値がある。そこで、今までのプログラミングスタイルを見直す意味で、この本から様々な知識を吸収する。


本のあらすじ
----------------------------

Python的考え方
^^^^^^^^^^^^^^^
1. 使っているバージョンを知れ
2. PEP 8 のスタイルに従え
3. **bytes, str, unicode** の違いを知れ
4. 複雑な関数を書くより、ヘルパー関数を書け
5. 文字列のスライスの仕方を知れ
6. シングルスライスで, **start, end, stride** の使用を避けろ
7. **map** や **filter** を使うより、リスト内包表記を使え
8. リスト内包表記で二つの表記より多く使うな
9. 大きな表記のためにジェネレーター表記を考えろ
10. **range** より **enumerate** を好め
11. 多数の要素を返したいとき、イテレーターを実行するためにzipを使え
12. **while　loop** や **for** のあとに **else** ブロックを使うな
13. **try/except/else/finally** のそれぞれのブロックの利点を使え。
  

関数
^^^^^^^^^^^^^^^
14. Noneを返すより,例外を返せ
15. どのように変数スコープとクロージャが関係するか知れ
16. リストを返す代わりに、ジェネレータを考えろ
17. 引数をイテレートするとき、防御的になれ
18. 可変配置引数を使って、視覚的なノイズを減らせ
19. キーワード引数で付加的な振る舞いを提供しろ
20. 動的なデフォルト引数を毒呈するために、**None** と **Docstrings** を使え
21. キーワードだけの引数で明瞭にせよ



クラスと継承
^^^^^^^^^^^^
22. ディクショナリやタプルで記憶するより、ヘルパークラスを作れ
23. クラスの代わりに、シンプルなインターフェスのための関数を用意しろ
24. 一般的にオブジェクトを作るための多形は **@classmethod** を使え
25. superで親クラスを初期化せよ
26. Mix-in ユーティリティークラスのための複数継承を使え
27. プライベート属性より、パブリック属性を好め
28. カスタムコンテナ型のために、**collections.abc** を継承せよ



メタクラスとオブジェクトの性質
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29. **Get** や **Set** の代わりに、Plain属性を使え
30. リファクタリング属性の代わりに、@propertyを考えろ
31. 再利用できる **@property** メソッドのために記述子を使え
32. みにくい属性のために **__getattr__** や **__getattribute__** や **__setattr__** を使え
33. メタクラスを持つサブクラスを確認せよ
34. メタクラスを持つクラスの存在を登録せよ
35. メタクラスを持つクラスの属性に注釈をつけよ

  

同時実行と並列
^^^^^^^^^^^^^^^^^^^^^^
36. 子プロセスを管理するために **subprocess** を使え
37. 同時実行を避けるために、ブロッキングI/Oのためのスレッドを使え
38. スレッド間におけるデータのアクセス競合を防ぐために **Lock** を使え
39. スレッド間における仕事を管理するために **Queue** を使え
40. たくさんの関数を同時に実行するために、コルーチンを考えろ
41. 

組み込みモジュール
^^^^^^^^^^^^^^^^^^^^
42. 
43. 
44. 
45. 
46. 
47. 
48.   


コラボレーション
^^^^^^^^^^^^^^^^^^
49. 
50. 
51. 
52. 
53. 


プロダクション
^^^^^^^^^^^^^^
54. 開発環境を考えてモジュールのコードを考えよ。
55. デバッグのアウトプットとして、reprを使え。
56. unittestで全てをテストせよ。
57. pdbを使った対話的なデバッグを考えよ。
58. 最適化する前にプロファイリングしろ。
59. メモリー使用量とメモリーリークを調べるにはtracemallocを使え。



この本を読んで
------------------
